=begin comment

Microsoft Bot Connector API - v3.0

﻿The Bot Connector REST API allows your bot to send and receive messages to channels configured in the  [Bot Framework Developer Portal](https://dev.botframework.com). The Connector service uses industry-standard REST  and JSON over HTTPS.    Client libraries for this REST API are available. See below for a list.    Many bots will use both the Bot Connector REST API and the associated [Bot State REST API](/en-us/restapi/state). The  Bot State REST API allows a bot to store and retrieve state associated with users and conversations.    Authentication for both the Bot Connector and Bot State REST APIs is accomplished with JWT Bearer tokens, and is  described in detail in the [Connector Authentication](/en-us/restapi/authentication) document.    # Client Libraries for the Bot Connector REST API    * [Bot Builder for C#](/en-us/csharp/builder/sdkreference/)  * [Bot Builder for Node.js](/en-us/node/builder/overview/)  * Generate your own from the [Connector API Swagger file](https://raw.githubusercontent.com/Microsoft/BotBuilder/master/CSharp/Library/Microsoft.Bot.Connector/Swagger/ConnectorAPI.json)    © 2016 Microsoft

OpenAPI spec version: v3
Contact: botframework@microsoft.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end comment

=cut

#
# NOTE: This class is auto generated by the swagger code generator program. 
# Do not edit the class manually.
# Ref: https://github.com/swagger-api/swagger-codegen
#
package MS::BotBuilder::ConversationsApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use MS::BotBuilder::ApiClient;
use MS::BotBuilder::Configuration;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class   = shift;
    my (%self) = (
        'api_client' => MS::BotBuilder::ApiClient->instance,
        @_
    );

    #my $self = {
    #    #api_client => $options->{api_client}
    #    api_client => $default_api_client
    #}; 

    bless \%self, $class;

}


#
# conversations_create_conversation
#
# CreateConversation
# 
# @param ConversationParameters $parameters Parameters to create the conversation from (required)
{
    my $params = {
    'parameters' => {
        data_type => 'ConversationParameters',
        description => 'Parameters to create the conversation from',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'conversations_create_conversation' } = { 
    	summary => 'CreateConversation',
        params => $params,
        returns => 'ConversationResourceResponse',
        };
}
# @return ConversationResourceResponse
#
sub conversations_create_conversation {
    my ($self, %args) = @_;

    # verify the required parameter 'parameters' is set
    unless (exists $args{'parameters'}) {
      croak("Missing the required parameter 'parameters' when calling conversations_create_conversation");
    }

    # parse inputs
    my $_resource_path = '/v3/conversations';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/json', 'application/xml', 'text/xml');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded');

    my $_body_data;
    # body params
    if ( exists $args{'parameters'}) {
        $_body_data = $args{'parameters'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ConversationResourceResponse', $response);
    return $_response_object;
}

#
# conversations_delete_activity
#
# DeleteActivity
# 
# @param string $conversation_id Conversation ID (required)
# @param string $activity_id activityId to delete (required)
{
    my $params = {
    'conversation_id' => {
        data_type => 'string',
        description => 'Conversation ID',
        required => '1',
    },
    'activity_id' => {
        data_type => 'string',
        description => 'activityId to delete',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'conversations_delete_activity' } = { 
    	summary => 'DeleteActivity',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub conversations_delete_activity {
    my ($self, %args) = @_;

    # verify the required parameter 'conversation_id' is set
    unless (exists $args{'conversation_id'}) {
      croak("Missing the required parameter 'conversation_id' when calling conversations_delete_activity");
    }

    # verify the required parameter 'activity_id' is set
    unless (exists $args{'activity_id'}) {
      croak("Missing the required parameter 'activity_id' when calling conversations_delete_activity");
    }

    # parse inputs
    my $_resource_path = '/v3/conversations/{conversationId}/activities/{activityId}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/json', 'application/xml', 'text/xml');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'conversation_id'}) {
        my $_base_variable = "{" . "conversationId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'conversation_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'activity_id'}) {
        my $_base_variable = "{" . "activityId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'activity_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# conversations_get_activity_members
#
# GetActivityMembers
# 
# @param string $conversation_id Conversation ID (required)
# @param string $activity_id Activity ID (required)
{
    my $params = {
    'conversation_id' => {
        data_type => 'string',
        description => 'Conversation ID',
        required => '1',
    },
    'activity_id' => {
        data_type => 'string',
        description => 'Activity ID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'conversations_get_activity_members' } = { 
    	summary => 'GetActivityMembers',
        params => $params,
        returns => 'ARRAY[ChannelAccount]',
        };
}
# @return ARRAY[ChannelAccount]
#
sub conversations_get_activity_members {
    my ($self, %args) = @_;

    # verify the required parameter 'conversation_id' is set
    unless (exists $args{'conversation_id'}) {
      croak("Missing the required parameter 'conversation_id' when calling conversations_get_activity_members");
    }

    # verify the required parameter 'activity_id' is set
    unless (exists $args{'activity_id'}) {
      croak("Missing the required parameter 'activity_id' when calling conversations_get_activity_members");
    }

    # parse inputs
    my $_resource_path = '/v3/conversations/{conversationId}/activities/{activityId}/members';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/json', 'application/xml', 'text/xml');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'conversation_id'}) {
        my $_base_variable = "{" . "conversationId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'conversation_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'activity_id'}) {
        my $_base_variable = "{" . "activityId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'activity_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[ChannelAccount]', $response);
    return $_response_object;
}

#
# conversations_get_conversation_members
#
# GetConversationMembers
# 
# @param string $conversation_id Conversation ID (required)
{
    my $params = {
    'conversation_id' => {
        data_type => 'string',
        description => 'Conversation ID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'conversations_get_conversation_members' } = { 
    	summary => 'GetConversationMembers',
        params => $params,
        returns => 'ARRAY[ChannelAccount]',
        };
}
# @return ARRAY[ChannelAccount]
#
sub conversations_get_conversation_members {
    my ($self, %args) = @_;

    # verify the required parameter 'conversation_id' is set
    unless (exists $args{'conversation_id'}) {
      croak("Missing the required parameter 'conversation_id' when calling conversations_get_conversation_members");
    }

    # parse inputs
    my $_resource_path = '/v3/conversations/{conversationId}/members';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/json', 'application/xml', 'text/xml');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'conversation_id'}) {
        my $_base_variable = "{" . "conversationId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'conversation_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[ChannelAccount]', $response);
    return $_response_object;
}

#
# conversations_reply_to_activity
#
# ReplyToActivity
# 
# @param string $conversation_id Conversation ID (required)
# @param string $activity_id activityId the reply is to (OPTIONAL) (required)
# @param Activity $activity Activity to send (required)
{
    my $params = {
    'conversation_id' => {
        data_type => 'string',
        description => 'Conversation ID',
        required => '1',
    },
    'activity_id' => {
        data_type => 'string',
        description => 'activityId the reply is to (OPTIONAL)',
        required => '1',
    },
    'activity' => {
        data_type => 'Activity',
        description => 'Activity to send',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'conversations_reply_to_activity' } = { 
    	summary => 'ReplyToActivity',
        params => $params,
        returns => 'ResourceResponse',
        };
}
# @return ResourceResponse
#
sub conversations_reply_to_activity {
    my ($self, %args) = @_;

    # verify the required parameter 'conversation_id' is set
    unless (exists $args{'conversation_id'}) {
      croak("Missing the required parameter 'conversation_id' when calling conversations_reply_to_activity");
    }

    # verify the required parameter 'activity_id' is set
    unless (exists $args{'activity_id'}) {
      croak("Missing the required parameter 'activity_id' when calling conversations_reply_to_activity");
    }

    # verify the required parameter 'activity' is set
    unless (exists $args{'activity'}) {
      croak("Missing the required parameter 'activity' when calling conversations_reply_to_activity");
    }

    # parse inputs
    my $_resource_path = '/v3/conversations/{conversationId}/activities/{activityId}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded');

    # path params
    if ( exists $args{'conversation_id'}) {
        my $_base_variable = "{" . "conversationId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'conversation_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'activity_id'}) {
        my $_base_variable = "{" . "activityId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'activity_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'activity'}) {
        $_body_data = $args{'activity'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ResourceResponse', $response);
    return $_response_object;
}

#
# conversations_send_to_conversation
#
# SendToConversation
# 
# @param Activity $activity Activity to send (required)
# @param string $conversation_id Conversation ID (required)
{
    my $params = {
    'activity' => {
        data_type => 'Activity',
        description => 'Activity to send',
        required => '1',
    },
    'conversation_id' => {
        data_type => 'string',
        description => 'Conversation ID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'conversations_send_to_conversation' } = { 
    	summary => 'SendToConversation',
        params => $params,
        returns => 'ResourceResponse',
        };
}
# @return ResourceResponse
#
sub conversations_send_to_conversation {
    my ($self, %args) = @_;

    # verify the required parameter 'activity' is set
    unless (exists $args{'activity'}) {
      croak("Missing the required parameter 'activity' when calling conversations_send_to_conversation");
    }

    # verify the required parameter 'conversation_id' is set
    unless (exists $args{'conversation_id'}) {
      croak("Missing the required parameter 'conversation_id' when calling conversations_send_to_conversation");
    }

    # parse inputs
    my $_resource_path = '/v3/conversations/{conversationId}/activities';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded');

    # path params
    if ( exists $args{'conversation_id'}) {
        my $_base_variable = "{" . "conversationId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'conversation_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'activity'}) {
        $_body_data = $args{'activity'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ResourceResponse', $response);
    return $_response_object;
}

#
# conversations_update_activity
#
# UpdateActivity
# 
# @param string $conversation_id Conversation ID (required)
# @param string $activity_id activityId to update (required)
# @param Activity $activity replacement Activity (required)
{
    my $params = {
    'conversation_id' => {
        data_type => 'string',
        description => 'Conversation ID',
        required => '1',
    },
    'activity_id' => {
        data_type => 'string',
        description => 'activityId to update',
        required => '1',
    },
    'activity' => {
        data_type => 'Activity',
        description => 'replacement Activity',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'conversations_update_activity' } = { 
    	summary => 'UpdateActivity',
        params => $params,
        returns => 'ResourceResponse',
        };
}
# @return ResourceResponse
#
sub conversations_update_activity {
    my ($self, %args) = @_;

    # verify the required parameter 'conversation_id' is set
    unless (exists $args{'conversation_id'}) {
      croak("Missing the required parameter 'conversation_id' when calling conversations_update_activity");
    }

    # verify the required parameter 'activity_id' is set
    unless (exists $args{'activity_id'}) {
      croak("Missing the required parameter 'activity_id' when calling conversations_update_activity");
    }

    # verify the required parameter 'activity' is set
    unless (exists $args{'activity'}) {
      croak("Missing the required parameter 'activity' when calling conversations_update_activity");
    }

    # parse inputs
    my $_resource_path = '/v3/conversations/{conversationId}/activities/{activityId}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded');

    # path params
    if ( exists $args{'conversation_id'}) {
        my $_base_variable = "{" . "conversationId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'conversation_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'activity_id'}) {
        my $_base_variable = "{" . "activityId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'activity_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'activity'}) {
        $_body_data = $args{'activity'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ResourceResponse', $response);
    return $_response_object;
}

#
# conversations_upload_attachment
#
# UploadAttachment
# 
# @param string $conversation_id Conversation ID (required)
# @param AttachmentData $attachment_upload Attachment data (required)
{
    my $params = {
    'conversation_id' => {
        data_type => 'string',
        description => 'Conversation ID',
        required => '1',
    },
    'attachment_upload' => {
        data_type => 'AttachmentData',
        description => 'Attachment data',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'conversations_upload_attachment' } = { 
    	summary => 'UploadAttachment',
        params => $params,
        returns => 'ResourceResponse',
        };
}
# @return ResourceResponse
#
sub conversations_upload_attachment {
    my ($self, %args) = @_;

    # verify the required parameter 'conversation_id' is set
    unless (exists $args{'conversation_id'}) {
      croak("Missing the required parameter 'conversation_id' when calling conversations_upload_attachment");
    }

    # verify the required parameter 'attachment_upload' is set
    unless (exists $args{'attachment_upload'}) {
      croak("Missing the required parameter 'attachment_upload' when calling conversations_upload_attachment");
    }

    # parse inputs
    my $_resource_path = '/v3/conversations/{conversationId}/attachments';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded');

    # path params
    if ( exists $args{'conversation_id'}) {
        my $_base_variable = "{" . "conversationId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'conversation_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'attachment_upload'}) {
        $_body_data = $args{'attachment_upload'};
    }

    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ResourceResponse', $response);
    return $_response_object;
}

1;
