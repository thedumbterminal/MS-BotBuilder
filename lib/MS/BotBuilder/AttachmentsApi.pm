=begin comment

Microsoft Bot Connector API - v3.0

﻿The Bot Connector REST API allows your bot to send and receive messages to channels configured in the  [Bot Framework Developer Portal](https://dev.botframework.com). The Connector service uses industry-standard REST  and JSON over HTTPS.    Client libraries for this REST API are available. See below for a list.    Many bots will use both the Bot Connector REST API and the associated [Bot State REST API](/en-us/restapi/state). The  Bot State REST API allows a bot to store and retrieve state associated with users and conversations.    Authentication for both the Bot Connector and Bot State REST APIs is accomplished with JWT Bearer tokens, and is  described in detail in the [Connector Authentication](/en-us/restapi/authentication) document.    # Client Libraries for the Bot Connector REST API    * [Bot Builder for C#](/en-us/csharp/builder/sdkreference/)  * [Bot Builder for Node.js](/en-us/node/builder/overview/)  * Generate your own from the [Connector API Swagger file](https://raw.githubusercontent.com/Microsoft/BotBuilder/master/CSharp/Library/Microsoft.Bot.Connector/Swagger/ConnectorAPI.json)    © 2016 Microsoft

OpenAPI spec version: v3
Contact: botframework@microsoft.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end comment

=cut

#
# NOTE: This class is auto generated by the swagger code generator program. 
# Do not edit the class manually.
# Ref: https://github.com/swagger-api/swagger-codegen
#
package MS::BotBuilder::AttachmentsApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use MS::BotBuilder::ApiClient;
use MS::BotBuilder::Configuration;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class   = shift;
    my (%self) = (
        'api_client' => MS::BotBuilder::ApiClient->instance,
        @_
    );

    #my $self = {
    #    #api_client => $options->{api_client}
    #    api_client => $default_api_client
    #}; 

    bless \%self, $class;

}


#
# attachments_get_attachment
#
# GetAttachment
# 
# @param string $attachment_id attachment id (required)
# @param string $view_id View id from attachmentInfo (required)
{
    my $params = {
    'attachment_id' => {
        data_type => 'string',
        description => 'attachment id',
        required => '1',
    },
    'view_id' => {
        data_type => 'string',
        description => 'View id from attachmentInfo',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'attachments_get_attachment' } = { 
    	summary => 'GetAttachment',
        params => $params,
        returns => 'File',
        };
}
# @return File
#
sub attachments_get_attachment {
    my ($self, %args) = @_;

    # verify the required parameter 'attachment_id' is set
    unless (exists $args{'attachment_id'}) {
      croak("Missing the required parameter 'attachment_id' when calling attachments_get_attachment");
    }

    # verify the required parameter 'view_id' is set
    unless (exists $args{'view_id'}) {
      croak("Missing the required parameter 'view_id' when calling attachments_get_attachment");
    }

    # parse inputs
    my $_resource_path = '/v3/attachments/{attachmentId}/views/{viewId}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/json', 'application/xml', 'text/xml');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'attachment_id'}) {
        my $_base_variable = "{" . "attachmentId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'attachment_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'view_id'}) {
        my $_base_variable = "{" . "viewId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'view_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('File', $response);
    return $_response_object;
}

#
# attachments_get_attachment_info
#
# GetAttachmentInfo
# 
# @param string $attachment_id attachment id (required)
{
    my $params = {
    'attachment_id' => {
        data_type => 'string',
        description => 'attachment id',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'attachments_get_attachment_info' } = { 
    	summary => 'GetAttachmentInfo',
        params => $params,
        returns => 'AttachmentInfo',
        };
}
# @return AttachmentInfo
#
sub attachments_get_attachment_info {
    my ($self, %args) = @_;

    # verify the required parameter 'attachment_id' is set
    unless (exists $args{'attachment_id'}) {
      croak("Missing the required parameter 'attachment_id' when calling attachments_get_attachment_info");
    }

    # parse inputs
    my $_resource_path = '/v3/attachments/{attachmentId}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'text/json', 'application/xml', 'text/xml');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'attachment_id'}) {
        my $_base_variable = "{" . "attachmentId" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'attachment_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('AttachmentInfo', $response);
    return $_response_object;
}

1;
